# OPTIMIZED DOCKERFILE FOR FAST CLOUD RUN DEPLOYMENTS
# Fixes deployment timeout issues and startup failures

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# OPTIMIZATION 1: Minimize build layers and reduce image size
RUN apt-get update && apt-get install -y \
    gcc g++ curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# OPTIMIZATION 2: Better caching strategy
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# OPTIMIZATION 3: Copy only essential files and use fast startup
COPY main_modular_fast.py .
COPY config.py .
COPY core.py .
COPY ai_service.py .
COPY chat_router.py .
COPY documents_router.py .
COPY search_router.py .
COPY admin_router.py .
COPY google_drive.py .
COPY Clair-sys-prompt.txt .
COPY gcp-credentials.json .

# OPTIMIZATION 4: Set optimal environment variables for Cloud Run
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONOPTIMIZE=1
# CRITICAL: Tell the app it's in production
ENV ENVIRONMENT=production
# OPTIMIZATION: Reduce startup time
ENV GRPC_POLL_STRATEGY=poll
ENV GRPC_ENABLE_FORK_SUPPORT=1

# OPTIMIZATION 5: Security with minimal overhead
RUN useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app
USER app

# OPTIMIZATION 6: Expose port
EXPOSE 8080

# OPTIMIZATION 7: Remove health check during startup (Cloud Run handles this)
# This prevents startup conflicts

# OPTIMIZATION 8: Use fast startup module with timeout handling
CMD ["python", "-m", "uvicorn", "main_modular_fast:app", \
     "--host", "0.0.0.0", \
     "--port", "8080", \
     "--timeout-keep-alive", "30", \
     "--timeout-graceful-shutdown", "30"]